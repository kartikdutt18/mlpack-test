# -*- coding: utf-8 -*-
"""Inference.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Nqy3Q8BY-drjivWeCTkxpQnYGWkufJ77
"""

from google.colab import files
files.upload()

import pandas as pd
import math

dataset = pd.read_csv('./results.csv', names = ['Activation-Function', 'Function-Type','Input-Size', 'Input-Type', 'Time-Taken (sec)'])

dataset.tail(5)

import matplotlib.pyplot as plt

class ActivationFunction:
  def __init__(self, name):
    self.name = name
    self.armadilloVectorList = [0] * 4
    self.simpleVectorList = [0] * 4
    self.armadilloMatList = [0] * 4
    self.simpleMatList = [0] * 4
  
  def addStep(self,functionType,inSize,inputType,timeTaken):
    if functionType == "Simple" and inputType == "Vector":
      self.simpleVectorList[int(math.log10(inSize))] = timeTaken
    elif functionType == "Simple" and inputType == "Matrix":
      self.simpleMatList[int(math.log10(inSize))] = timeTaken
    elif functionType == "Armadillo" and inputType == "Vector":
      self.armadilloVectorList[int(math.log10(inSize))] = timeTaken
    elif functionType == "Armadillo" and inputType == "Matrix":
      self.armadilloMatList[int(math.log10(inSize))] = timeTaken

inputSize = [1, 10, 100, 1000]

HardSigmoid = ActivationFunction('HardSigmoid')
Logistic = ActivationFunction('Logistic')
Mish = ActivationFunction('Mish')
SoftPlus = ActivationFunction('SoftPlus')
SoftSign=ActivationFunction ('SoftSign')
Swish=ActivationFunction ('Swish')

functionDictionary = {
    'HardSigmoid':HardSigmoid,
    'Logistic': Logistic,
    'Mish':Mish,
    'SoftPlus':SoftPlus,
    'Swish':Swish
}

def buildDataset():
  for i in range(len(dataset)):
    functionDictionary[dataset.loc[i][0]].addStep(dataset.loc[i][1],dataset.loc[i][2], dataset.loc[i][3], dataset.loc[i][4])
  print("Build Successful!")

buildDataset()

def plot(obj):
  plt.figure(1)
  plt.plot(inputSize, obj.simpleVectorList, label='simple')
  plt.plot(inputSize, obj.armadilloVectorList, label='armadillo')
  plt.ylabel('Time')
  plt.xlabel('InputSize')
  plt.title(obj.name + '_with_vector')
  plt.legend()
  plt.figure(2)
  plt.plot(inputSize, obj.simpleMatList, label='simple')
  plt.plot(inputSize, obj.armadilloMatList, label='armadillo')
  plt.title(obj.name + '_with_matrix')
  plt.ylabel('Time')
  plt.xlabel('InputSize')
  plt.legend()

plot(HardSigmoid)

plot(Logistic)

plot(Mish)

plot(SoftPlus)

plot(Swish)

